openapi: 3.0.2
info:
  contact:
    email: cortexsupport@dalet.com
    name: Dalet
    url: https://www.dalet.com
  description: |
    # Scope
    Dalet Mediator API allows you to submit long running media jobs managed by Dalet services.

    Long running media jobs include:
    - **Media processing** such as transcoding or automatic QC.
    - **Automatic metadata extraction** such as automatic speech transcription or face detection.

    The Dalet Mediator API is a REST API with typed schema for the payload.
    # Architecture
    Job processing is performed on the cloud via dynamic combination of microservices. Dalet Mediator adopts the [EBU MCMA] architecture.  The key objectives of this architecture are to support:
    - Job management and monitoring
    - Long running transactions
    - Event based communication pattern
    - Service registration and discovery
    - Horizontal scalability in an elastic manner

    The architecture is implemented using the serverless approach - relying on  independent microservices accessible through well documented REST endpoints and sharing a common object model.
    ## Roles
    The following services are involved in the processing of media jobs exposed through the Dalet Media Mediator API:
    - **Mediator**: this is the main entry point to the architecture; this API endpoint supports:
    1. Checking authentication using an API key and a token mechanism
    2. Verifying quota restrictions before accepting a submitted job
    3. Keeping track of usage so that job processing can be tracked and billed
    4. Keeping track of jobs metadata as a job repository
    - **Job Processor**: once a job request is accepted by the mediator, it is assigned to a Job Processor. The Job Processor dispatches the job to an appropriate Job Worker (depending on the job profile and other criteria such as load on the system and cost of operation).  It then keeps track of the progress of the job and its status until completion and possible failures and timeout.  It reports progress to the Mediator through notifications.
    - **Job Worker**: The Job Worker performs the actual work on the media object, for example, AI metadata extraction (AME) or essence transcoding.  It reports progress to the Job Processor through notifications.
    - **Service Registry**: The Service Registry keeps track of all active services in the architecture. It is queried by the Mediator and by Processors to discover candidate services to perform jobs.  It is updated whenever a new service is launched or stopped.  The Service Registry also stores the list of all job profiles supported by one of the Job Workers deployed in the architecture.
    The Dalet Mediator API abstracts away from the complexity of this orchestration and provides a simple endpoint to submit long running jobs and monitor the progress of their execution.  It serves as a facade for the additional technical services for authentication, usage monitoring and service registry.

    [EBU MCMA]: /https://tech.ebu.ch/groups/mcma 'EBU MCMA'
    ## Job Lifecycle
    ![Job Lifecyle Diagram](./job_lifecycle.svg 'Job Lifecycle Diagram')

    ## Authentication
    To use the Dalet Mediator API - you must obtain an APIKey from Dalet.  This key comes in the form of two parameters:
    * client ID
    * secret

    Given these two parameters, a client program must first obtain an access token (GET /auth/access-token) and then associate this token to every subsequent calls.  When the token expires, the API will return a 401 error code.  In this case, the client must request a new token and resubmit the request.
  termsOfService: https://www.dalet.com
  title: Dalet Media Cortex API
  version: 2.1.0
servers:
- url: https://svi6ps1cih.execute-api.us-east-1.amazonaws.com/preprod
paths:
  /auth/access-token:
    post:
      description: Generate new access token
      operationId: getAccessToken
      parameters:
      - description: client_id of the application
        explode: false
        in: header
        name: client
        required: true
        schema:
          type: string
        style: simple
      - description: secret_key of the application
        explode: false
        in: header
        name: secret
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              example:
                $ref: '#/components/examples/GetTokenResponse/value'
              schema:
                $ref: '#/components/schemas/Token'
          description: Success response
        "401":
          description: Invalid secret or client
      tags:
      - auth
      x-accepts:
      - application/json
  /jobs:
    post:
      description: Submit a new job to the Dalet Media Mediator
      operationId: createJob
      requestBody:
        content:
          application/json:
            example:
              $ref: '#/components/examples/MediatorJobPost/value'
            schema:
              $ref: '#/components/schemas/JobMediatorInput'
        description: Object describing the Job to be executed.
        required: true
      responses:
        "201":
          content:
            application/json:
              example:
                $ref: '#/components/examples/MediatorJobPostResponse/value'
              schema:
                $ref: '#/components/schemas/MediatorJob'
          description: Success response
        "400":
          description: Bad request
        "401":
          description: Authorization request fail
        "502":
          description: Failed request.  Reason is most likely quota violation.
      security:
      - tokenSignature: []
      tags:
      - jobs
      x-content-type: application/json
      x-accepts:
      - application/json
  /jobs/{jobId}:
    get:
      description: Get job
      operationId: getJobById
      parameters:
      - description: ID of the job as returned in JobMediatorEntity
        example: 5b166783-7ab5-39b8-fcb5-6255dd115412
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                $ref: '#/components/examples/MediatorJobGetResponse/value'
              schema:
                $ref: '#/components/schemas/MediatorJob'
          description: Success response
        "404":
          description: Job with required ID does not exist
      security:
      - tokenSignature: []
      tags:
      - jobs
      x-accepts:
      - application/json
  /job-types:
    get:
      description: Get all job types including their metadata.
      operationId: getAllJobTypes
      parameters:
      - description: Project service id of the client which associated to the request
        explode: false
        in: header
        name: ProjectServiceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/JobType'
                type: array
          description: Success response
      security:
      - tokenSignature: []
      tags:
      - jobTypes
      x-accepts:
      - application/json
components:
  examples:
    GetTokenResponse:
      value:
        Authorization: Bearer eyJraWQiOiIwZ2FsdS1SQktGUFpPYlRmWFI0b05YVjZaVEt4dFEwckhnWllBcTZHUk1vIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULnNGRV9oYUh3VmNseDk5clhkcmpDcFE3YWdibTdhMEtrNFF4dFNCZThpTHciLCJpc3MiOiJodHRwczovL2Rldi03NTA3MjYub2t0YS5jb20vb2F1dGgyL01lZGlhdG9yQXV0aG9yaXphdGlvblNlcnZlciIsImF1ZCI6ImFwaTovL2RlZmF1bHQiLCJpYXQiOjE1NTI5MjU5NDYsImV4cCI6MTU1MjkyOTU0NiwiY2lkIjoiMG9hY2k4bnB0TnAzWHRocXgzNTYiLCJzY3AiOlsiTWVkaWF0b3ItVXNlci1TY29wZSJdLCJzdWIiOiIwb2FjaThucHROcDNYdGhxeDM1NiJ9.Mk55dBttIBuY07NX8FLqvtl6QqlUsrIUSrgNEHV3fHQXcjNfDDWbM2W2fqUzj0OQudH92KBOFhFlW3q-g5US190dZYsg2SXCQG1KCtTTG3-OOQokMY4ygCvUAr7Vg8feuB-6wniJn5R_8rY8keIiCg6R6dEng32iiKzoo9phyGuS5qlANFVFKs7Nc7ZGQ_LlYWIV_ExUkP3Cd6OOriy-gnaeNe87RBSuKj5e20_sFYrpwhjrppnlbm4Ib_WsPA-tvvSAlN5hQpFHCJnzHY0YMa3XvAMNE2uX6Jd_mMl-OJnsl9QYqeoZIKJH-y10ooLXuX6G55X-xcxUkRBTEI1uqg
    MediatorJobPost:
      value:
        job:
          jobProfile: MediaCortexVideoAnalysis
          jobInput:
            outputLocation:
              awsS3Bucket: dalet-corecortex
              httpEndpoint: https://dalet-scrumcorecortex.s3.amazonaws.com/e80e5756-9604-49cb-b51f-7a0183739576.json?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20190312T140712Z&X-Amz-SignedHeaders=host&X-Amz-Expires=14399&X-Amz-Credential=AKIAJFJMBWYZOLHMXSAQ%2F20190312%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=9adddb04911b8192b2af2cc1a88f70ec4353575dedf0afc18f26a89fe876d2f2
              awsS3Key: e80e5756-9604-49cb-b51f-7a0183739576.json
            inputFile:
              awsS3Bucket: dalet-corecortex
              dataFilter:
              - ocr
              httpEndpoint: https://dalet-scrumcorecortex.s3.amazonaws.com/00000132.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20190312T140712Z&X-Amz-SignedHeaders=host&X-Amz-Expires=3599&X-Amz-Credential=AKIAJFJMBWYZOLHMXSAQ%2F20190312%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=cd2e5592167003240f1839bbcf5b4c8c42a478106b82fb54f6996e7c77669ef6
              language: English
              awsS3Key: 00000132.mp4
              projectServiceId: cjor5rew6n6y2075817kkq4vu
              tracking:
                titleName: Short (40 seconds)
                titleId: "62236"
                mediaDuration: "40"
                media: https://dalet-scrumcorecortex.s3.amazonaws.com/00000132.mp4
              quantity: 40
    MediatorJobPostResponse:
      value:
        id: https://2gd9r33c.execute-api.us-east-1.amazonaws.com/dev/jobs/21f439cb-7139-4b12-a697-c664182d5d5b
        dateCreated: 2019-02-27T10:06:57.298Z
        dateModified: 2019-02-27T10:06:58.169Z
        quantity: 123
        status:
          status: QUEUED
          statusMessage: ""
          progress: 0
    MediatorJobGetResponse:
      value:
        id: https://2gd9r33c.execute-api.us-east-1.amazonaws.com/dev/jobs/21f439cb-7139-4b12-a697-c664182d5d5b
        dateCreated: 2019-02-27T10:06:57.298Z
        dateModified: 2019-02-27T10:06:58.169Z
        quantity: 123
        status:
          status: COMPLETED
          statusMessage: ""
          progress: 100
        jobOutput:
          jobOutputType: VideoAnalysisOutput
          outputFile:
            awsS3Bucket: com-dalet-cortex
  schemas:
    VideoAnalysisInput:
      allOf:
      - $ref: '#/components/schemas/JobInput'
      - properties:
          inputFile:
            $ref: '#/components/schemas/Locator'
          outputLocation:
            $ref: '#/components/schemas/Locator'
          dataFilter:
            description: Determine which types of AI analyses are to be indexed.
            example: "[\"keywords\", \"ocr\", \"brands\"]"
            items:
              enum:
              - audioEffects
              - brands
              - faces
              - keywords
              - labels
              - ocr
              - sentiments
              - shots
              - textualContentModeration
              - transcript
              - visualContentModeration
              type: string
            type: array
          language:
            $ref: '#/components/schemas/Language'
          startOfMaterial:
            description: Indicate the timecode of the first frame in the media in
              seconds.  Generated subtitles start from this time.
            example: 182.6
            type: number
        required:
        - inputFile
        - outputLocation
        type: object
      description: Describe the input and expected output of the job to be executed
        by Media Cortex. Files are specified using FIMS Essence Locators.
      title: VideoAnalysisInput
    SpeechToTextInput:
      allOf:
      - $ref: '#/components/schemas/JobInput'
      - properties:
          inputFile:
            $ref: '#/components/schemas/Locator'
          outputLocation:
            $ref: '#/components/schemas/SpeechToTextOutput'
          title:
            description: Readable name associated to the job when submitted to Media
              Cortex service.
            type: string
          language:
            $ref: '#/components/schemas/Language'
          startOfMaterial:
            description: Indicate the timecode of the first frame in the media in
              seconds.  Generated subtitles start from this time.
            example: 182.6
            type: number
          vocabulary:
            items:
              $ref: '#/components/schemas/SpeechToTextVocabulary'
            type: array
          captionFormatStandard:
            description: "Which standard will be used for caption formatting. EBU-TT,\
              \ CEA-608 and CEA-708 are supported standards."
            type: string
        required:
        - inputFile
        - outputLocation
        type: object
      description: "Describe the input and expected output of the job to be executed\
        \ by Media Cortex. Files are specified using FIMS Essence Locators. Specifies\
        \ which media file is to be indexed by the Media Cortex service, its language,\
        \ and a user defined name associated to the job.  This job produces captions\
        \ for the media in EBU-TT, JSON and textual formats"
      title: SpeechToTextInput
    SpeechToTextVocabulary:
      properties:
        content:
          type: string
        sounds_like:
          items:
            type: string
          type: array
      type: object
    VideoAnalysisOutput:
      allOf:
      - $ref: '#/components/schemas/JobOutput'
      - properties:
          outputFile:
            $ref: '#/components/schemas/Locator'
        type: object
      title: VideoAnalysisOutput
    SpeechToTextOutput:
      allOf:
      - $ref: '#/components/schemas/JobOutput'
      - properties:
          jsonFormat:
            $ref: '#/components/schemas/Locator'
          ttmlFormat:
            $ref: '#/components/schemas/Locator'
          srtFormat:
            $ref: '#/components/schemas/Locator'
          textFormat:
            $ref: '#/components/schemas/Locator'
          draftjsFormat:
            $ref: '#/components/schemas/Locator'
        type: object
      description: "Specifies where the captions computed by the Media Cortex service\
        \ are to be stored.  Different formats can be requested (EBU-TT, SRT, JSON\
        \ or text). <ul> <li>jsonFormat - Location of the output file into which metadata\
        \ will be stored in JSON format.  The JSON format provides a timestamp for\
        \ each transcribed. </li> <li>ttmlFormat - Location of the output file into\
        \ which the speech transcription will be stored as subtitles encode in EBU-TT\
        \ (TTML) format.  See https://tech.ebu.ch/docs/tech/tech3350.pdf. </li> <li>srtFormat\
        \ - Location of the output file into which the speech transcription will be\
        \ stored as subtitles encode in SRT format. See https://en.wikipedia.org/wiki/SubRip.\
        \ </li> <li>textFormat - Location of the output file into which the text of\
        \ the speech transcription will be stored in simple format with no timestamps.\
        \ </li> <li>draftjsFormat - Location of the output file into which the text\
        \ of the speech transcription will be stored in draftjs format. </li> </ul>"
      title: SpeechToTextOutput
    Locator:
      description: Generic description of a file location according to the EBU FIMS
        specification.
      properties:
        awsS3Bucket:
          description: Name of an AWS S3 bucket
          example: dalet-AI-bucket
          type: string
        awsS3Key:
          description: "Name of a file in the AWS S3 bucket. For example, name of\
            \ media file to be indexed in an Input Locator or name of a JSON file\
            \ in an Output Locator."
          example: 0000132.mp4
          type: string
        httpEndpoint:
          description: Public URL to access the file in the bucket. Must be computed
            using the AWS SDK method `GeneratePresignedUrl`
          type: string
      required:
      - awsS3Bucket
      - awsS3Key
      - httpEndpoint
      title: Locator
      type: object
    Language:
      description: Language of the media file to be indexed according to ISO 639-1
        Language Name. See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes.  Used
        in Job/inputFile
      example: English
      type: string
    JobMediatorInput:
      description: "Toplevel description of any job submitted to the Dalet Media Mediator\
        \ service.  Encapsulates a service specific job description with authentication,\
        \ billing and tracking metadata."
      example:
        quantity: 50
        notificationEndpoint: notificationEndpoint
        projectServiceId: cjor5rew6n6y2075817kkq4vu
        job:
          maxRegionLatency: 100
          jobProfile: MediaCortexSpeechToText
          regionName: eu-west-1
          jobType: AIJob
          jobInput:
            jobInputType: jobInputType
        tracking: "{}"
      properties:
        projectServiceId:
          description: Customer Project ID.  This ID must be provided by Dalet when
            a Cortex service is provisioned.  It must match the authorization token
            you have been provided.
          example: cjor5rew6n6y2075817kkq4vu
          type: string
        quantity:
          description: "Number of units that will be charged for this job.  The unit\
            \ depends on the job profile.  For example, for an AI metadata extraction\
            \ job, units are seconds of media duration."
          example: 50
          type: integer
        tracking:
          description: Client metadata associated to the job.  This can include any
            identification fields provided by the client. It should identify the job
            in a unique manner and is useful to reconcile usage reports with client
            metadata.
          type: object
        notificationEndpoint:
          description: Callback URL endpoint to be called once the stage of the job
            is changed.
          type: string
        job:
          $ref: '#/components/schemas/Job'
      required:
      - job
      - projectServiceId
      - quantity
      title: JobMediatorInput
      type: object
    Job:
      example:
        maxRegionLatency: 100
        jobProfile: MediaCortexSpeechToText
        regionName: eu-west-1
        jobType: AIJob
        jobInput:
          jobInputType: jobInputType
      properties:
        jobType:
          enum:
          - AIJob
          - MediaProcessingJob
          - FaceRecognitionJob
          type: string
        jobProfile:
          description: Define what type of job is to be executed on the media object.
          enum:
          - MediaCortexVideoAnalysis
          - MediaCortexSpeechToText
          - ExtractFaces
          - ClusterFaces
          - SearchFaces
          example: MediaCortexSpeechToText
          type: string
        regionName:
          description: "If defined, require job to be run on a Worker instance that\
            \ can serve any of the regions, else can run on any Worker instance. If\
            \ no service is available for the requested regions, the job fails."
          example: eu-west-1
          type: string
        maxRegionLatency:
          default: 100
          description: "If defined, require job to be run on a Worker instance that\
            \ can access the requested region with a latency less than this value"
          example: 100
          type: integer
        jobInput:
          $ref: '#/components/schemas/JobInput'
      type: object
    JobInput:
      additionalProperties: false
      description: Can be either VideoAnalysisInput or SpeechToTextInput.
      discriminator:
        propertyName: jobInputType
      example:
        jobInputType: jobInputType
      properties:
        jobInputType:
          type: string
      required:
      - jobInputType
      type: object
    MediatorJob:
      description: "After a job is submitted to the Dalet Media Mediator service,\
        \ it is attributed metadata that helps track its lifecycle.  In addition to\
        \ the input field (Job input / Job output), the JobMediatorEntity provides\
        \ a unique ID, date created and last modified and usage information (verified\
        \ quantity and usage ID to reconcile with invoice).  These additional fields\
        \ are all computed by the mediator and read-only."
      example:
        dateCreated: dateCreated
        quantity: 0
        dateModified: dateModified
        id: id
        status:
          progress: 6
          statusMessage: statusMessage
          status: NEW
        jobOutput:
          jobOutputType: jobOutputType
      properties:
        id:
          description: Job ID computed by the Dalet Media Mediator Job registry.  Uniquely
            identifies the job after it has been accepted by the mediator.
          type: string
        dateCreated:
          description: Datetime when the job was accepted by the Mediator
          type: string
        dateModified:
          description: Datetime when the job was last updated by a Job Processor service
            reporting progress on this job.
          type: string
        quantity:
          description: "Verified number of units after the job is completed.  Units\
            \ depend on the job profile (usually, they correspond to the duration\
            \ of the media).  Invoicing is based on this value, which may be different\
            \ from the one submitted by the client."
          type: integer
        status:
          $ref: '#/components/schemas/JobMediatorStatus'
        jobOutput:
          $ref: '#/components/schemas/JobOutput'
      required:
      - dateCreated
      - dateModified
      - id
      - quantity
      - status
      type: object
    JobMediatorStatus:
      description: "Current status of the job as reported by the associated Job Processor\
        \ if the job is committed.  Returned by the GET /jobs/{jobId} call. <br/>jobOutput\
        \ is a copy of the output specification that was provided when the job was\
        \ submitted."
      example:
        progress: 6
        statusMessage: statusMessage
        status: NEW
      properties:
        status:
          description: "Current status of the job as reported by the Job Processor\
            \ that is handling it, or FAILED if it was rejected (e.g., for missing\
            \ quota). <br/>Possible transitions - NEW -> QUEUED -> RUNNING -> COMPLETED."
          enum:
          - NEW
          - FAILED
          - QUEUED
          - SCHEDULED
          - RUNNING
          - COMPLETED
          example: NEW
          type: string
        statusMessage:
          description: Last message reported by Job Processor handling this job.
          type: string
        progress:
          description: Progress as reported by the Job Processor. (TBD)
          type: integer
      required:
      - status
      title: JobMediatorStatus
      type: object
    JobOutput:
      additionalProperties: false
      description: Where the output of the job analysis will be stored. Can be either
        VideoAnalysisOutput or SpeechToTextOutput.
      discriminator:
        propertyName: jobOutputType
      example:
        jobOutputType: jobOutputType
      properties:
        jobOutputType:
          type: string
      required:
      - jobOutputType
      type: object
    Token:
      description: Access token necessary to submit requests to the API.
      example:
        authorization: authorization
        expires: 0
      properties:
        authorization:
          type: string
        expires:
          type: integer
      required:
      - authorization
      - expires
      title: Token
      type: object
    JobType:
      description: List of job profiles accossiated to job type.
      example:
        name: name
        profiles:
        - profiles
        - profiles
      properties:
        name:
          type: string
        profiles:
          items:
            type: string
          type: array
      required:
      - jobType
      - profiles
      title: JobTypeProfiles
      type: object
  securitySchemes:
    tokenSignature:
      in: header
      name: Authorization
      type: apiKey

